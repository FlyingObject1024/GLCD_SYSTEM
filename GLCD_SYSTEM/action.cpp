/*
 * action.cpp
 *
 * Created: 2018/01/22 15:19:00
 *  Author: kodai
 */
 /*
 #define F_CPU 8000000UL
 #include <avr/io.h>
 #include <stdlib.h>//乱数用
 #include <util/delay.h>
 #include <avr/interrupt.h>
 #include <avr/pgmspace.h>
 //PROGMEMで配置
 //pgm_read_byte(&変数);で呼び出し
 #include "Glcd_function.h"
 #include "defines.h"


#define	MAP_SIZE_X	16
#define	MAP_SIZE_Y	6

static int16_t	Mx = 0;
static int16_t	My = 0;
static int8_t	Vx = 0;
static int8_t	Vy = 0;
static int8_t	ScrollPos = 0;
static uint8_t	JumpFlag = 0;
static uint8_t	MapPos = 0;
static uint8_t	CharDir = 0;
static uint8_t	WalkPtn = 0;
static uint8_t	TimeCount = 0;
static uint8_t	LeftTime = 0;
static int16_t	Score = 0;

static const uint8_t MAP_DATA[][6] PROGMEM = {
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },	// 0x00
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x19, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x19, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x1E, 0x1C, 0x00, 0x00, 0x00, 0x00 },
{ 0x1F, 0x1D, 0x00, 0x00, 0x0C, 0x0A },
{ 0x18, 0x00, 0x00, 0x00, 0x0D, 0x0B },
{ 0x1E, 0x1E, 0x1C, 0x00, 0x00, 0x00 },
{ 0x1F, 0x1F, 0x1D, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x0C, 0x0A },
{ 0x18, 0x08, 0x00, 0x00, 0x0D, 0x0B },
{ 0x18, 0x06, 0x08, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x07, 0x00, 0x00 },	// 0x10
{ 0x18, 0x08, 0x09, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x07, 0x00, 0x00, 0x00 },
{ 0x18, 0x09, 0x00, 0x00, 0x10, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x10, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x10, 0x00 },
{ 0x18, 0x1B, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x1B, 0x1B, 0x00, 0x00, 0x00 },
{ 0x18, 0x1B, 0x1B, 0x1B, 0x00, 0x00 },
{ 0x18, 0x1B, 0x1B, 0x00, 0x00, 0x00 },
{ 0x18, 0x1B, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x11, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x19, 0x10, 0x00 },	// 0x20
{ 0x18, 0x00, 0x00, 0x19, 0x10, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x19, 0x10, 0x00 },
{ 0x00, 0x00, 0x00, 0x19, 0x10, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x1E, 0x1C, 0x00, 0x00, 0x00, 0x00 },
{ 0x1F, 0x1D, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	// 0x30
{ 0x1E, 0x1E, 0x1C, 0x00, 0x00, 0x00 },
{ 0x1F, 0x1F, 0x1D, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x1E, 0x1E, 0x1E, 0x1C, 0x00, 0x00 },
{ 0x1F, 0x1F, 0x1F, 0x1D, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x11, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x19, 0x10, 0x00 },
{ 0x18, 0x00, 0x00, 0x19, 0x10, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x00, 0x00 },	// 0x40
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x1B, 0x1B, 0x00, 0x00, 0x00 },
{ 0x18, 0x1B, 0x1B, 0x1B, 0x1B, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x1B, 0x00 },
{ 0x18, 0x00, 0x11, 0x00, 0x1B, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x1B, 0x00 },
{ 0x18, 0x00, 0x1B, 0x1B, 0x1B, 0x00 },
{ 0x18, 0x00, 0x1B, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x1B, 0x00, 0x1B, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x1B, 0x00 },
{ 0x18, 0x1B, 0x1B, 0x1B, 0x1B, 0x00 },
{ 0x18, 0x1B, 0x1B, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x1B, 0x00 },
{ 0x18, 0x00, 0x10, 0x00, 0x1B, 0x00 },
{ 0x18, 0x00, 0x10, 0x00, 0x1B, 0x00 },	// 0x50
{ 0x18, 0x00, 0x10, 0x00, 0x1B, 0x00 },
{ 0x18, 0x00, 0x10, 0x00, 0x1B, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x1B, 0x00 },
{ 0x18, 0x1B, 0x1B, 0x1B, 0x1B, 0x00 },
{ 0x18, 0x1B, 0x1B, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x19, 0x10, 0x00 },
{ 0x18, 0x00, 0x00, 0x19, 0x10, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },	// 0x60
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x19, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x19, 0x00, 0x10 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x19, 0x00, 0x10 },
{ 0x00, 0x19, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x19, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x19, 0x10, 0x00, 0x19, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x19, 0x11, 0x00, 0x19, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x19, 0x10, 0x00, 0x19, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },	// 0x70
{ 0x00, 0x00, 0x19, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0A },
{ 0x00, 0x19, 0x00, 0x00, 0x0D, 0x0B },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x19, 0x00, 0x0C, 0x0A },
{ 0x00, 0x00, 0x00, 0x00, 0x0D, 0x0B },
{ 0x19, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x19, 0x11, 0x00, 0x19, 0x00, 0x00 },
{ 0x19, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x19, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },	// 0x80
{ 0x18, 0x1B, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x1B, 0x1B, 0x00, 0x00, 0x00 },
{ 0x18, 0x1B, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x1B, 0x00, 0x0F, 0x1B, 0x1B },
{ 0x18, 0x1B, 0x00, 0x0F, 0x1B, 0x1B },
{ 0x18, 0x1B, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x1B, 0x1B, 0x00, 0x00, 0x00 },
{ 0x18, 0x1B, 0x1B, 0x0E, 0x00, 0x00 },
{ 0x18, 0x1B, 0x1B, 0x0E, 0x00, 0x00 },
{ 0x18, 0x1B, 0x1B, 0x00, 0x00, 0x00 },
{ 0x18, 0x1B, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x11, 0x00 },
{ 0x18, 0x1B, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x1B, 0x0E, 0x00, 0x00, 0x1B },
{ 0x18, 0x1B, 0x00, 0x00, 0x00, 0x1B },
{ 0x18, 0x1B, 0x00, 0x00, 0x0F, 0x1B },	// 0x90
{ 0x18, 0x1B, 0x0E, 0x00, 0x00, 0x1B },
{ 0x18, 0x1B, 0x00, 0x00, 0x00, 0x1B },
{ 0x18, 0x1B, 0x00, 0x00, 0x0F, 0x1B },
{ 0x18, 0x1B, 0x0E, 0x00, 0x00, 0x1B },
{ 0x18, 0x1B, 0x00, 0x00, 0x00, 0x1B },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x1B },
{ 0x18, 0x00, 0x1B, 0x00, 0x00, 0x1B },
{ 0x18, 0x00, 0x1B, 0x00, 0x0F, 0x1B },
{ 0x18, 0x00, 0x1B, 0x00, 0x0F, 0x1B },
{ 0x18, 0x00, 0x1B, 0x00, 0x0F, 0x1B },
{ 0x18, 0x00, 0x1B, 0x00, 0x0F, 0x1B },
{ 0x18, 0x00, 0x1B, 0x00, 0x0F, 0x1B },
{ 0x18, 0x00, 0x1B, 0x00, 0x00, 0x1B },
{ 0x18, 0x00, 0x1B, 0x00, 0x11, 0x1B },
{ 0x18, 0x00, 0x1B, 0x1B, 0x1B, 0x1B },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },	// 0xA0
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x1E, 0x1E, 0x1C, 0x00, 0x00, 0x00 },
{ 0x1F, 0x1F, 0x1D, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x10, 0x00, 0x19, 0x00 },
{ 0x18, 0x00, 0x10, 0x00, 0x19, 0x11 },
{ 0x18, 0x00, 0x10, 0x00, 0x19, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x1E, 0x1E, 0x1C, 0x00, 0x00, 0x00 },
{ 0x1F, 0x1F, 0x1D, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x18, 0x1E, 0x1C, 0x00 },
{ 0x18, 0x00, 0x18, 0x1F, 0x1D, 0x00 },	// 0xB0
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x1E, 0x1E, 0x1E, 0x1C, 0x00, 0x00 },
{ 0x1F, 0x1F, 0x1F, 0x1D, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x0C, 0x0A },
{ 0x18, 0x08, 0x00, 0x00, 0x0D, 0x0B },
{ 0x18, 0x06, 0x08, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x07, 0x00, 0x00 },
{ 0x18, 0x08, 0x09, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x07, 0x00, 0x0C, 0x0A },
{ 0x18, 0x09, 0x00, 0x00, 0x0D, 0x0B },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x10, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x10, 0x00 },	// 0xC0
{ 0x18, 0x00, 0x19, 0x00, 0x10, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x10, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x10, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x10, 0x00, 0x19, 0x00, 0x10 },
{ 0x18, 0x10, 0x00, 0x19, 0x00, 0x10 },
{ 0x18, 0x10, 0x00, 0x19, 0x00, 0x10 },
{ 0x18, 0x10, 0x00, 0x19, 0x00, 0x10 },
{ 0x18, 0x10, 0x00, 0x19, 0x00, 0x10 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x10, 0x00, 0x19, 0x00 },
{ 0x18, 0x00, 0x10, 0x00, 0x19, 0x00 },
{ 0x18, 0x00, 0x10, 0x00, 0x19, 0x11 },
{ 0x18, 0x00, 0x10, 0x00, 0x19, 0x00 },	// 0xD0
{ 0x18, 0x00, 0x10, 0x00, 0x19, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x10, 0x00, 0x19, 0x00, 0x10 },
{ 0x18, 0x10, 0x00, 0x19, 0x00, 0x10 },
{ 0x18, 0x10, 0x00, 0x19, 0x00, 0x10 },
{ 0x18, 0x10, 0x00, 0x19, 0x00, 0x10 },
{ 0x18, 0x10, 0x00, 0x19, 0x00, 0x10 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x10, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x10, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x10, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x10, 0x00 },
{ 0x18, 0x00, 0x19, 0x00, 0x10, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },	// 0xE0
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x1E, 0x1E, 0x1C, 0x00, 0x00, 0x00 },
{ 0x1F, 0x1F, 0x1D, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x1E, 0x1E, 0x1E, 0x1C, 0x00, 0x00 },
{ 0x1F, 0x1F, 0x1F, 0x1D, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x0C, 0x0A },
{ 0x18, 0x08, 0x00, 0x00, 0x0D, 0x0B },
{ 0x18, 0x06, 0x08, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x08, 0x00, 0x00 },
{ 0x18, 0x00, 0x06, 0x00, 0x07, 0x00 },
{ 0x18, 0x06, 0x00, 0x09, 0x00, 0x00 },
{ 0x18, 0x08, 0x09, 0x00, 0x0C, 0x0A },
{ 0x18, 0x06, 0x08, 0x00, 0x0D, 0x0B },	// 0xF0
{ 0x18, 0x00, 0x00, 0x07, 0x00, 0x00 },
{ 0x18, 0x00, 0x09, 0x00, 0x00, 0x00 },
{ 0x18, 0x09, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x02, 0x02, 0x05, 0x00, 0x00 },
{ 0x18, 0x02, 0x02, 0x04, 0x02, 0x05 },
{ 0x18, 0x02, 0x02, 0x04, 0x02, 0x05 },
{ 0x18, 0x01, 0x03, 0x04, 0x02, 0x05 },
{ 0x18, 0x02, 0x02, 0x04, 0x02, 0x05 },
{ 0x18, 0x02, 0x02, 0x04, 0x02, 0x05 },
{ 0x18, 0x02, 0x02, 0x05, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

void initMap(void)
{
	uint8_t x, y;
	for(x = 0; x < MAP_SIZE_X; x++){
		for(y = 0; y < MAP_SIZE_Y; y++){
			cgPutChar(x, y, 0x80 | pgm_read_byte( &MAP_DATA[x][MAP_SIZE_Y-1-y] ) );
		}
	}
	MapPos = MAP_SIZE_X;
}

void scrollMap(void)
{
	uint8_t y;

	cgScroll( SCROLL_LEFT );
	for(y = 0; y < MAP_SIZE_Y; y++){
		cgPutChar( MAP_SIZE_X-1, y, 0x80 | pgm_read_byte( &MAP_DATA[MapPos][MAP_SIZE_Y-1-y] ) );
	}
	MapPos++;
}

void dispTime(void)
{
	fbDrawChar( 104, 0, 0x0E, DRAW_MODE_PUT );
	fbDrawChar( 112, 0, '0' + LeftTime/10, DRAW_MODE_PUT );
	fbDrawChar( 120, 0, '0' + LeftTime%10, DRAW_MODE_PUT );
}

void dispScore(void)
{
	uint8_t i;
	uint16_t sc;

	fbDrawStr(20, 26, "SCORE", DRAW_MODE_PUT);

	sc = Score;
	for(i=0; i<5; i++){
		fbDrawChar( 100-i*8, 26, '0' + (sc % 10), DRAW_MODE_PUT );
		sc = sc / 10;
	}
}

uint8_t action_main(void)
{
	Clear_Screen();
	fbDrawCGRAMOffset( -ScrollPos/8, 0 );

	// key L/R input
	if( (btnStatus & BTN_RIGHT ) && Vx < 8) Vx += 2;
	if( (btnStatus & BTN_LEFT  ) && Vx >-8) Vx -= 2;
	if(Vx > 0) Vx--;
	if(Vx < 0) Vx++;
	// key Jump
	if( (btnStatus & BTN_OK ) && JumpFlag == 0){
		JumpFlag = 1;
		Vy = -24;
	}
	// fall
	if(Vy < 24) Vy += 2;

	// block check & move
	int8_t CyU = ( (My + 8)/64 );
	int8_t CyD = ( (My +56)/64 );
	int8_t NxL = ( (Mx + ScrollPos + Vx+ 8)/64 );
	int8_t NxR = ( (Mx + ScrollPos + Vx+48)/64 );
	if(Vx > 0){
		if(NxR > 15) Vx =  0;
		else if( cgGetChar(NxR, CyU) > 0x97 || cgGetChar(NxR, CyD) > 0x97 ){
			Vx = 0;
		}
	}
	else{
		if(NxL < 0) Vx =  0;
		else if( cgGetChar(NxL, CyU) > 0x97 || cgGetChar(NxL, CyD) > 0x97 ){
			Vx = 0;
		}
	}

	int8_t CxL = ( (Mx + ScrollPos + 8)/64 );
	int8_t CxR = ( (Mx + ScrollPos +48)/64 );
	int8_t NyU = ( (My + Vy + 8)/64 );
	int8_t NyD = ( (My + Vy +63)/64 );
	if(Vy > 0){
		if( cgGetChar(CxL, NyD) > 0x97 || cgGetChar(CxR, NyD) > 0x97 ){
			JumpFlag = 0;
			Vy = 0;
		}
		else{
			JumpFlag = 1;
			
		}
	}
	else{
		if( cgGetChar(CxL, NyU) > 0x97 || cgGetChar(CxR, NyU) > 0x97 ){
			Vy = 0;
		}
	}

	Mx = Mx + Vx;
	My = My + Vy;

	// character put
	WalkPtn = ( WalkPtn + 1 ) & 0x03;
	if(Vx < 0) CharDir = 4;
	if(Vx > 0) CharDir = 0;
	if( JumpFlag != 0 ){
		fbDrawChar(Mx/8, My/8, 0xB3 + CharDir, DRAW_MODE_AND );
		fbDrawChar(Mx/8, My/8, 0xA3 + CharDir, DRAW_MODE_OR );
	}
	else if( Vx == 0 ){
		fbDrawChar(Mx/8, My/8, 0xB0 + CharDir, DRAW_MODE_AND );
		fbDrawChar(Mx/8, My/8, 0xA0 + CharDir, DRAW_MODE_OR );
	}
	else{
		fbDrawChar(Mx/8, My/8, 0xB1 + CharDir + WalkPtn/2, DRAW_MODE_AND );
		fbDrawChar(Mx/8, My/8, 0xA1 + CharDir + WalkPtn/2, DRAW_MODE_OR );
	}

	// coin, time extend, etc.
	int8_t Cx = ( (Mx + ScrollPos +32)/64 );
	int8_t Cy = ( (My             +32)/64 );
	if( Cx >= 0 && Cx < 16 && Cy >= 0 && Cy < 6 ){
		uint8_t m = cgGetChar( Cx, Cy );
		if(m == 0x90){
			cgPutChar(Cx, Cy, 0);
			Score++;
		}
		else if( m == 0x91 ){
			cgPutChar(Cx, Cy, 0);
			LeftTime += 10;
			if( LeftTime > 99 ) LeftTime = 99;
		}
		else if(m == 0x8E || m == 0x8F ){
			return 1;
		}
	}

	if(Cy > 6){
		return 1;
	}

	// scroll
	if(Mx > 64*8){
		ScrollPos = ScrollPos + ( Mx - 64*8 );
		Mx = 64*8;
		if( ScrollPos >= 8*8 ){
			ScrollPos -= 8*8;
			scrollMap();
		}
	}

	// time up
	TimeCount++;
	if(TimeCount > 33){
		TimeCount = 0;
		LeftTime--;
	}
	dispTime();
	if(LeftTime == 0){
		Glcd_str( 32, 6, "TIME UP!");
		return 1;
	}
	
	return 0;
}

uint8_t jumpTitle(void)
{
	Glcd_str( 6*8, 16, "ACTION");

	if( btnOnFlag & BTN_OK ){
		initMap();
		Mx = 0;
		My = 4*8*8;
		Vx = 0;
		Vy = 0;
		ScrollPos = 0;
		JumpFlag = 0;
		CharDir = 0;
		TimeCount = 0;
		LeftTime = 40;
		Score = 0;
		return 1;
	}
	return 0;
}

uint8_t jumpOver(void)
{
	static uint8_t state = 0;

	state++;
	if(state == 0xFF) state = 0x40;
	if((state & 0x20) == 0){
		Glcd_str( 28, 16, "GAME OVER");
	}
	else{
		fbFillRect( 28, 16, 9*8, 8, 0 );
	}
	dispScore();

	if( (btnOnFlag & BTN_OK) != 0 && (state > 0x20) ){
		Clear_Screen();
		state = 0;
		return 1;
	}
	
	return 0;
}

*/