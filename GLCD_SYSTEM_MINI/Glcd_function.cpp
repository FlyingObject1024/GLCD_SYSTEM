/*
 * Glcd_function.cpp
 *
 * Created: 2017/12/29 2:44:44
 *  Author: kodai
 */ 
#include <avr/io.h>
#include <avr/pgmspace.h>
#include <stdlib.h>
#include "Glcd_function.h"
#include "defines.h"
#include <util/delay.h>

const char chara_font[162][5] PROGMEM ={
		{0b00000000,0b00000000,0b00000000,0b00000000,0b00000000},// 
		{0b00000000,0b00000000,0b01001111,0b00000000,0b00000000},//!
		{0b00000000,0b00000111,0b00000000,0b00000111,0b00000000},//"
		{0b00010100,0b01111111,0b00010100,0b01111111,0b00010100},//#
		{0b00100100,0b00101010,0b01111111,0b00101010,0b00010010},//$
		{0b01100011,0b00010011,0b00001000,0b01100100,0b01100010},//%
		{0b00110110,0b01001001,0b01010101,0b00100010,0b01010000},//&
		{0b00000000,0b00000101,0b00000011,0b00000000,0b00000000},//'
		{0b00000000,0b00011100,0b00100010,0b01000001,0b00000000},//(
		{0b00000000,0b01000001,0b00100010,0b00011100,0b00000000},//)
		{0b00010100,0b00001000,0b00111110,0b00001000,0b00010100},//*
		{0b00001000,0b00001000,0b00111110,0b00001000,0b00001000},//+
		{0b00000000,0b01010000,0b00110000,0b00000000,0b00000000},//,
		{0b00001000,0b00001000,0b00001000,0b00001000,0b00001000},//-
		{0b00000000,0b01100000,0b01100000,0b00000000,0b00000000},//.
		{0b00100000,0b00010000,0b00001000,0b00000100,0b00000010},///
		{0b00111110,0b01010001,0b01001001,0b01000101,0b00111110},//0
		{0b00000000,0b01000010,0b01111111,0b01000000,0b00000000},//1
		{0b01000010,0b01100001,0b01010001,0b01001001,0b01000110},//2
		{0b00100001,0b01000001,0b01000101,0b01001011,0b00110001},//3
		{0b00011000,0b00010100,0b00010010,0b01111111,0b00010000},//4
		{0b00100111,0b01000101,0b01000101,0b01000101,0b00111001},//5
		{0b00111100,0b01001010,0b01001001,0b01001001,0b00110000},//6
		{0b00000001,0b01110001,0b00001001,0b00000101,0b00000011},//7
		{0b00110110,0b01001001,0b01001001,0b01001001,0b00110110},//8
		{0b00000110,0b01001001,0b01001001,0b00100101,0b00011110},//9
		{0b00000000,0b00110110,0b00110110,0b00000000,0b00000000},//:
		{0b00000000,0b01010110,0b00110110,0b00000000,0b00000000},//;
		{0b00001000,0b00010100,0b00100010,0b01000001,0b00000000},//<
		{0b00010100,0b00010100,0b00010100,0b00010100,0b00010100},//=
		{0b00000000,0b01000001,0b00100010,0b00010100,0b00001000},//>
		{0b00000010,0b00000001,0b01010001,0b00001001,0b00000110},//?
		{0b00110010,0b01001001,0b01111001,0b01000001,0b00111110},//@
		{0b01111110,0b00100001,0b00100001,0b00100001,0b01111110},//A
		{0b01111111,0b01001001,0b01001001,0b01001001,0b00110110},//B
		{0b00111110,0b01000001,0b01000001,0b01000001,0b00100010},//C
		{0b01111111,0b01000001,0b01000001,0b00100010,0b00011100},//D
		{0b01111111,0b01001001,0b01001001,0b01001001,0b01000001},//E
		{0b01111111,0b00001001,0b00001001,0b00001001,0b00000001},//F
		{0b00111110,0b01000001,0b01001001,0b01001001,0b01111010},//G
		{0b01111111,0b00001000,0b00001000,0b00001000,0b01111111},//H
		{0b00000000,0b01000001,0b01111111,0b01000001,0b00000000},//I
		{0b00100000,0b01000000,0b01000001,0b00111111,0b00000001},//J
		{0b01111111,0b00001000,0b00010100,0b00100010,0b01000001},//K
		{0b01111111,0b01000000,0b01000000,0b01000000,0b01000000},//L
		{0b01111111,0b00000010,0b00000100,0b00000010,0b01111111},//M
		{0b01111111,0b00000100,0b00001000,0b00010000,0b01111111},//N
		{0b00111110,0b01000001,0b01000001,0b01000001,0b00111110},//O
		{0b01111111,0b00001001,0b00001001,0b00001001,0b00000110},//P
		{0b00111110,0b01000001,0b01010001,0b00100001,0b01011110},//Q
		{0b01111111,0b00001001,0b00011001,0b00101001,0b01000110},//R
		{0b01000110,0b01001001,0b01001001,0b01001001,0b00110001},//S
		{0b00000001,0b00000001,0b01111111,0b00000001,0b00000001},//T
		{0b00111111,0b01000000,0b01000000,0b01000000,0b00111111},//U
		{0b00011111,0b00100000,0b01000000,0b00100000,0b00011111},//V
		{0b00111111,0b01000000,0b00111000,0b01000000,0b00111111},//W
		{0b01100011,0b00010100,0b00001000,0b00010100,0b01100011},//X
		{0b00000111,0b00001000,0b01110000,0b00001000,0b00000111},//Y
		{0b01100001,0b01010001,0b01001001,0b01000101,0b01000011},//Z
		{0b00000000,0b01111111,0b01000001,0b01000001,0b00000000},//[
		{0b00010101,0b00010110,0b01111100,0b00010110,0b00010101},//\//
		{0b00000000,0b01000001,0b01000001,0b01111111,0b00000000},//]
		{0b00000100,0b00000010,0b00000001,0b00000010,0b00000100},//^
		{0b01000000,0b01000000,0b01000000,0b01000000,0b01000000},//_
		{0b00000000,0b00000001,0b00000010,0b00000100,0b00000000},//`
		{0b00100000,0b01010100,0b01010100,0b01010100,0b01111000},//a
		{0b01111111,0b01001000,0b01000100,0b01000100,0b00111000},//b
		{0b00111000,0b01000100,0b01000100,0b01000100,0b00100000},//c
		{0b00111000,0b01000100,0b01000100,0b01001000,0b01111111},//d
		{0b00111000,0b01010100,0b01010100,0b01010100,0b00011000},//e
		{0b00001000,0b01111110,0b00001001,0b00000001,0b00000010},//f
		{0b00001100,0b01010010,0b01010010,0b01010010,0b00111110},//g
		{0b01111111,0b00001000,0b00000100,0b00000100,0b01111000},//h
		{0b00000000,0b01000100,0b01111101,0b01000000,0b00000000},//i
		{0b00100000,0b01000000,0b01000100,0b00111101,0b00000000},//j
		{0b01111111,0b00010000,0b00101000,0b01000100,0b00000000},//k
		{0b00000000,0b01000001,0b01111111,0b01000000,0b00000000},//l
		{0b01111100,0b00000100,0b00011000,0b00000100,0b01111000},//m
		{0b01111100,0b00001000,0b00000100,0b00000100,0b01111000},//n
		{0b00111000,0b01000100,0b01000100,0b01000100,0b00111000},//o
		{0b01111100,0b00010100,0b00010100,0b00010100,0b00001000},//p
		{0b00001000,0b00010100,0b00010100,0b00011000,0b01111100},//q
		{0b01111100,0b00001000,0b00000100,0b00000100,0b00001000},//r
		{0b01001000,0b01010100,0b01010100,0b01010100,0b00100000},//s
		{0b00000100,0b00111111,0b01000100,0b01000000,0b00100000},//t
		{0b00111100,0b01000000,0b01000000,0b00100000,0b01111100},//u
		{0b00011100,0b00100000,0b01000000,0b00100000,0b00011100},//v
		{0b00111100,0b01000000,0b00110000,0b01000000,0b00111100},//w
		{0b01000100,0b00101000,0b00010000,0b00101000,0b01000100},//x
		{0b00001100,0b01010000,0b01010000,0b01010000,0b00111100},//y
		{0b01000100,0b01100100,0b01010100,0b01001100,0b01000100},//z
		{0b00000000,0b00001000,0b00110110,0b01000001,0b00000000},//{
		{0b00000000,0b00000000,0b01111111,0b00000000,0b00000000},//|
		{0b00000000,0b01000001,0b00110110,0b00001000,0b00000000},//}
		{0b00111110,0b00111110,0b00011100,0b00001000,0b00000000},//Å®
		{0b00001000,0b00011100,0b00101010,0b00001000,0b00001000},//Å©
//////////////////////////////////////////////////////////////////////////32ÉtÉHÉìÉgî≤ÇØ
		{0,0,0,0,0},
		{0b01110000,0b01010000,0b01110000,0b00000000,0b00000000},//°
		{0b00000000,0b00000000,0b00001111,0b00000001,0b00000001},//¢
		{0b01000000,0b01000000,0b01111000,0b00000000,0b00000000},//£
		{0b00010000,0b00100000,0b01000000,0b00000000,0b00000000},//§
		{0b00000000,0b00011000,0b00011000,0b00000000,0b00000000},//•
		{0b00001010,0b00001010,0b01001010,0b00101010,0b00011110},//¶
		{0b00000100,0b01000100,0b00110100,0b00010100,0b00001100},//ß
		{0b00100000,0b00010000,0b01111000,0b00000100,0b00000000},//®
		{0b00011000,0b00001000,0b01001100,0b01001000,0b00111000},//©
		{0b01001000,0b01001000,0b01111000,0b01001000,0b01001000},//™
		{0b01001000,0b00101000,0b00011000,0b01111100,0b00001000},//´
		{0b00001000,0b01111100,0b00000100,0b00101000,0b00011000},//¨
		{0b01000000,0b01001000,0b01001000,0b01111000,0b01000000},//≠
		{0b01010100,0b01010100,0b01010100,0b01010100,0b01111100},//Æ
		{0b00011000,0b00000000,0b01011000,0b01000000,0b00111000},//Ø
		{0b00001000,0b00001000,0b00001000,0b00001000,0b00001000},//-
		{0b00000001,0b01000001,0b00111101,0b00001001,0b00000111},//±
		{0b00010000,0b00001000,0b01111100,0b00000010,0b00000001},//≤
		{0b00001110,0b00000010,0b01000011,0b00100010,0b00011110},//≥
		{0b01000010,0b01000010,0b01111110,0b01000010,0b01000010},//¥
		{0b00100010,0b00010010,0b00001010,0b01111111,0b00000010},//µ
		{0b01000010,0b00111111,0b00000010,0b01000010,0b00111110},//∂
		{0b00001010,0b00001010,0b01111111,0b00001010,0b00001010},//∑
		{0b00001000,0b01000110,0b01000010,0b00100010,0b00011110},//∏
		{0b00000100,0b00000011,0b01000010,0b00111110,0b00000010},//π
		{0b01000010,0b01000010,0b01000010,0b01000010,0b01111110},//∫
		{0b00000010,0b01001111,0b00100010,0b00011111,0b00000010},//ª
		{0b01001010,0b01001010,0b01000000,0b00100000,0b00011100},//º
		{0b01000010,0b00100010,0b00010010,0b00101010,0b01000110},//Ω
		{0b00000010,0b00111111,0b01000010,0b01001010,0b01000110},//æ
		{0b00000110,0b01001000,0b01000000,0b01000000,0b00111100},//ø
		{0b00001000,0b01000110,0b01001010,0b00110010,0b00011110},//¿
		{0b00001010,0b01001010,0b00111110,0b00001001,0b00001000},//¡
		{0b00001110,0b00000000,0b01001110,0b00100000,0b00011110},//¬
		{0b00000100,0b01000101,0b00111101,0b00000101,0b00000100},//√
		{0b00000000,0b01111111,0b00001000,0b00010000,0b00000000},//ƒ
		{0b01000100,0b00100100,0b00011111,0b00000100,0b00000100},//≈
		{0b01000000,0b01000010,0b01000010,0b01000010,0b01000000},//∆
		{0b01000010,0b00101010,0b00010010,0b00101010,0b00000110},//«
		{0b00100010,0b00010010,0b01111011,0b00010110,0b00100010},//»
		{0b00000000,0b01000000,0b00100000,0b00011111,0b00000000},//…
		{0b01111000,0b00000000,0b00000010,0b00000100,0b01111000},// 
		{0b00111111,0b01000100,0b01000100,0b01000100,0b01000100},//À
		{0b00000010,0b01000010,0b01000010,0b00100010,0b00011110},//Ã
		{0b00000100,0b00000010,0b00000100,0b00001000,0b00110000},//Õ
		{0b00110010,0b00000010,0b01111111,0b00000010,0b00110010},//Œ
		{0b00000010,0b00010010,0b00100010,0b01010010,0b00001110},//œ
		{0b00000000,0b00101010,0b00101010,0b00101010,0b01000000},//–
		{0b00111000,0b00100100,0b00100010,0b00100000,0b01110000},//—
		{0b01000000,0b00101000,0b00010000,0b00101000,0b00000110},//“
		{0b00001010,0b00111110,0b01001010,0b01001010,0b01001010},//”
		{0b00000100,0b01111111,0b00000100,0b00010100,0b00001100},//‘
		{0b01000000,0b01000010,0b01000010,0b01111110,0b01000000},//’
		{0b01001010,0b01001010,0b01001010,0b01001010,0b01111110},//÷
		{0b00000100,0b00000101,0b01000101,0b00100101,0b00011100},//◊
		{0b00001111,0b01000000,0b00100000,0b00011111,0b00000000},//ÿ
		{0b01111100,0b00000000,0b01111110,0b01000000,0b00110000},//Ÿ
		{0b01111110,0b01000000,0b00100000,0b00010000,0b00001000},//⁄
		{0b01111110,0b01000010,0b01000010,0b01000010,0b01111110},//€
		{0b00001110,0b00000010,0b01000010,0b00100010,0b00011110},//‹
		{0b01000010,0b01000010,0b01000000,0b00100000,0b00011000},//›
		{0b00000010,0b00000100,0b00000001,0b00000010,0b00000000},//ﬁ
		{0b00000111,0b00000101,0b00000111,0b00000000,0b00000000},//ﬂ
		{0b01100000,0b01110000,0b01111000,0b01110000,0b01100000},//è„
		{0b00000011,0b00000111,0b00001111,0b00000111,0b00000011},//â∫
		//{0b,0b,0b,0b,0b},
	};
/*
const uint64_t mini_font[25] PROGMEM ={
	0b0000010101010011101110010010010101000000000000001111010111111101,
	0b0000010101111110001101100100001010010000000000001101010001001101,
	0b0000010000010010010010000100001111111000111000010101010111111111,
	0b0000000000111011100101000100001010010010000000100101010100001001,
	0b0000010000010110101110000010010101000100000010100111010111111001,

	0b0111111111111111000000010110010110111111010101111001101100101001,
	0b0100100101101101010010101101101101100100101101010001101100111101,
	0b0111111001111111000000111111100101110110100111010001110100111111,
	0b0001101001101001010010101101101101100100101101010101101100101101,
	0b0111111001111111000110101111010110111100011101111010101111101100,
	
	0b0111110010110011111101101101101101111110101011010000000000100000,
	0b0101101101101100010101101101101101001100111001101000000000100000,
	0b0101110101110110010101101111010010010100010001000000000011110011,
	0b0101100111101001010101010111101010100100111001000000100101101100,
	0b0111100011101110010010010101101010111110010011000111010011110011,
	
	0b0001000001010100000001000010000000000000000000010010000000000000,
	0b0001111010101100010000100010101000010110011101100111101101101101,
	0b0011101111011110000001101010111111101101101110010010101101101010,
	0b0101110010001101010001110010101101101110011100001010101101111010,
	0b0011111010110101010011101010101101010100001100110011011010101101,
	
	0b0000000011010110000000000000000000000000000000000000000000000000,
	0b0101111010010010000000000000000000000000000000000000000000000000,
	0b0101001100010001000000000000000000000000000000000000000000000000,
	0b0010110010010010000000000000000000000000000000000000000000000000,
	0b0100111011010110000000000000000000000000000000000000000000000000,
};
*/
const char graphics[256][8] PROGMEM ={

	{ 0x1c, 0x22, 0x41, 0xc1, 0x41, 0x22, 0x1c, 0x00 }, // [0]
	{ 0x00, 0xe7, 0x1f, 0xeb, 0x0b, 0x07, 0x03, 0x03 }, // [1]
	{ 0x80, 0x47, 0x3f, 0x2b, 0x6b, 0x07, 0x03, 0x03 }, // [2]
	{ 0x20, 0x27, 0x1f, 0x2b, 0xcb, 0x07, 0x03, 0x03 }, // [3]
	{ 0x00, 0x47, 0x7f, 0xeb, 0x0b, 0x07, 0x03, 0x03 }, // [4]
	{ 0x67, 0x9f, 0x6b, 0x8b, 0x07, 0x03, 0x03, 0x00 }, // [5]
	{ 0x80, 0x9c, 0x7f, 0xec, 0x2c, 0x1c, 0x0c, 0x0c }, // [6]
	{ 0x9c, 0xfc, 0x6f, 0xac, 0x1c, 0x0c, 0x0c, 0x00 }, // [7]
	{ 0x1c, 0x22, 0x71, 0xc9, 0x7f, 0xff, 0x7c, 0x00 }, // [8]
	{ 0x00, 0xe1, 0x1f, 0xe1, 0x00, 0x00, 0x00, 0x00 }, // [9]
	{ 0x1c, 0x22, 0x61, 0xd1, 0xff, 0xfe, 0x7c, 0x00 }, // [10]
	{ 0x00, 0xe1, 0x1f, 0xe3, 0x00, 0x00, 0x00, 0x00 }, // [11]
	{ 0xc4, 0xa4, 0xf4, 0xaf, 0xb7, 0xe4, 0xa8, 0x60 }, // [12]
	{ 0xc8, 0xa4, 0xf7, 0xaf, 0x54, 0x74, 0x50, 0x30 }, // [13]
	{ 0x03, 0x1b, 0xc4, 0xba, 0x7a, 0x28, 0x1c, 0x0c }, // [14]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [15]
	{ 0x88, 0xc4, 0x24, 0x1f, 0x2b, 0xc8, 0x90, 0x00 }, // [16]
	{ 0xc0, 0xac, 0x24, 0x1f, 0x2b, 0x68, 0x44, 0x00 }, // [17]
	{ 0xc0, 0x48, 0x64, 0x1f, 0xeb, 0x88, 0x00, 0x00 }, // [18]
	{ 0xc8, 0x44, 0x24, 0x1f, 0x2b, 0x28, 0x66, 0x00 }, // [19]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [20]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [21]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [22]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [23]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [24]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [25]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [26]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [27]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [28]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [29]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [30]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [31]
	{ 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0x00, 0x00, 0x00 }, //
	{ 0x80, 0xc0, 0xe0, 0xb0, 0xd8, 0xac, 0xd6, 0xff }, // !
	{ 0xfe, 0xba, 0xd6, 0xee, 0xd6, 0xba, 0xfe, 0x00 }, // "
	{ 0x40, 0x78, 0xfc, 0xfe, 0xfc, 0x78, 0x40, 0x00 }, // #
	{ 0xc0, 0xc0, 0x7e, 0x06, 0xc6, 0xc6, 0x7e, 0x00 }, // $
	{ 0xc0, 0xc0, 0xc0, 0x7e, 0x06, 0x4c, 0x38, 0x00 }, // %
	{ 0xf8, 0x88, 0x8f, 0x81, 0x81, 0x8f, 0x88, 0xf8 }, // &
	{ 0xfc, 0x86, 0xfd, 0x85, 0x85, 0xfd, 0x86, 0xfc }, // '
	{ 0x10, 0xf8, 0xac, 0xfe, 0xac, 0xf8, 0x10, 0x00 }, // (
	{ 0xf8, 0x84, 0xf2, 0x91, 0x91, 0xf2, 0x84, 0xf8 }, // )
	{ 0xc0, 0xc0, 0xff, 0xc1, 0xc1, 0xff, 0xc0, 0xc0 }, // *
	{ 0xf8, 0xf0, 0xff, 0xfe, 0xf8, 0xff, 0xe1, 0xf8 }, // +
	{ 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x00, 0x00 }, // ,
	{ 0xfc, 0x5a, 0xfd, 0x83, 0x0f, 0xf2, 0x26, 0xf8 }, // -
	{ 0xc7, 0x28, 0x97, 0x7d, 0x7d, 0x97, 0x28, 0xc7 }, // .
	{ 0x00, 0x20, 0x97, 0x7d, 0x7d, 0x97, 0x20, 0x00 }, // /
	{ 0x40, 0x80, 0xc0, 0x80, 0xc0, 0x40, 0x80, 0xc0 }, // 0
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 1
	{ 0x90, 0xd0, 0xfe, 0x39, 0x60, 0xc0, 0xc0, 0x60 }, // 2
	{ 0x38, 0x00, 0x38, 0x38, 0x38, 0x38, 0x10, 0x10 }, // 3
	{ 0x00, 0x88, 0xdc, 0x7e, 0x3f, 0x19, 0x10, 0x00 }, // 4
	{ 0x70, 0xf8, 0xcc, 0xfe, 0xcc, 0xf8, 0x70, 0x00 }, // 5
	{ 0x00, 0x00, 0xbc, 0xbf, 0xbc, 0x00, 0x00, 0x00 }, // 6
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 7
	{ 0xf0, 0x7a, 0xec, 0x78, 0xec, 0x7a, 0xf0, 0x00 }, // 8
	{ 0xb8, 0xfc, 0x36, 0xfe, 0x36, 0xfc, 0xb8, 0x00 }, // 9
	{ 0x00, 0x04, 0x0a, 0xfa, 0xaa, 0xa4, 0x00, 0x00 }, // :
	{ 0x80, 0x40, 0x20, 0x50, 0x28, 0x08, 0x48, 0x30 }, // ;
	{ 0x40, 0x20, 0x50, 0x28, 0x48, 0x30, 0x40, 0x80 }, // <
	{ 0x02, 0x05, 0x04, 0x0a, 0x14, 0x08, 0x14, 0x10 }, // =
	{ 0x08, 0x08, 0x14, 0x18, 0x14, 0x0a, 0x05, 0x02 }, // >
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // ?
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // @
	{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }, // A
	{ 0xa2, 0x8a, 0xa8, 0x2a, 0xa2, 0x8a, 0xa8, 0x2a }, // B
	{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }, // C
	{ 0x19, 0x15, 0x13, 0x11, 0x13, 0x15, 0x19, 0x11 }, // D
	{ 0x91, 0xa9, 0xc5, 0x83, 0x83, 0xc5, 0xa9, 0x91 }, // E
	{ 0x22, 0x11, 0x11, 0x22, 0x22, 0x44, 0x44, 0x22 }, // F
	{ 0x66, 0x33, 0x33, 0x66, 0x66, 0xcc, 0xcc, 0x66 }, // G
	{ 0xee, 0xee, 0xee, 0x00, 0xee, 0xee, 0xee, 0x00 }, // H
	{ 0xe0, 0xfe, 0xf8, 0x80, 0xe0, 0xfe, 0xf8, 0x80 }, // I
	{ 0x07, 0x7f, 0x1f, 0x01, 0x07, 0x7f, 0x1f, 0x01 }, // J
	{ 0xfc, 0x92, 0x92, 0xaa, 0x92, 0x92, 0xfc, 0x00 }, // K
	{ 0x38, 0x38, 0x38, 0xfe, 0x7c, 0x38, 0x10, 0x00 }, // L
	{ 0x10, 0x38, 0x7c, 0xfe, 0x38, 0x38, 0x38, 0x00 }, // M
	{ 0x10, 0x18, 0xfc, 0xfe, 0xfc, 0x18, 0x10, 0x00 }, // N
	{ 0x10, 0x30, 0x7e, 0xfe, 0x7e, 0x30, 0x10, 0x00 }, // O
	{ 0x3e, 0x41, 0x41, 0x4f, 0x49, 0x41, 0x3e, 0x00 }, // P
	{ 0x81, 0xf6, 0xee, 0x9e, 0xc0, 0xf6, 0xf6, 0x7f }, // Q
	{ 0x7e, 0x81, 0x85, 0xd3, 0xdb, 0x8d, 0x81, 0x7e }, // R
	{ 0x7e, 0x81, 0xbd, 0x85, 0x85, 0x85, 0xc1, 0x7e }, // S
	{ 0x00, 0x3e, 0x7f, 0x5d, 0x63, 0x3e, 0x00, 0x00 }, // T
	{ 0x7f, 0x41, 0xc1, 0x41, 0x41, 0x41, 0x7f, 0xc1 }, // U
	{ 0x41, 0x7f, 0xc1, 0x41, 0xff, 0xc1, 0x7f, 0x7f }, // V
	{ 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff }, // W
	{ 0x00, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00 }, // X
	{ 0x3e, 0x1c, 0x7c, 0xdc, 0x7c, 0x1c, 0x3e, 0x00 }, // Y
	{ 0x82, 0xfe, 0xfe, 0xfe, 0xaa, 0x38, 0x10, 0x00 }, // Z
	{ 0xf8, 0x70, 0x7c, 0x76, 0x7c, 0x70, 0xf8, 0x00 }, // [
	{ 0x10, 0x38, 0xaa, 0xfe, 0xfe, 0xfe, 0x82, 0x00 }, // \//
	{ 0x42, 0x42, 0xdb, 0xdb, 0xff, 0xff, 0xe7, 0xc3 }, // ]
	{ 0x66, 0xff, 0xc3, 0x5a, 0x5a, 0xc3, 0xff, 0x66 }, // ^
	{ 0x18, 0x3c, 0xa5, 0xff, 0xe7, 0xff, 0x66, 0x3c }, // _
	{ 0x00, 0x00, 0x18, 0x24, 0x24, 0x18, 0x00, 0x00 }, // `
	{ 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00 }, // a
	{ 0x18, 0x66, 0x52, 0x85, 0xa1, 0x4a, 0x66, 0x18 }, // b
	{ 0x66, 0x99, 0x89, 0x62, 0x46, 0x91, 0x99, 0x66 }, // c
	{ 0x66, 0x91, 0x81, 0x02, 0x40, 0x81, 0x89, 0x66 }, // d
	{ 0x00, 0x66, 0x52, 0x04, 0x20, 0x4a, 0x66, 0x00 }, // e
	{ 0x00, 0x24, 0x52, 0x04, 0x20, 0x4a, 0x24, 0x00 }, // f
	{ 0x00, 0x20, 0x12, 0x04, 0x20, 0x48, 0x04, 0x00 }, // g
	{ 0x1e, 0x7c, 0x78, 0x78, 0x38, 0x30, 0x30, 0x10 }, // h
	{ 0x00, 0x30, 0x00, 0x30, 0x30, 0x30, 0x00, 0x00 }, // i
	{ 0x1c, 0x3e, 0x7e, 0xfc, 0x7e, 0x3e, 0x1c, 0x00 }, // j
	{ 0x1e, 0x73, 0x33, 0x7f, 0x33, 0x73, 0x1e, 0x00 }, // k
	{ 0x44, 0x6c, 0x7e, 0x3f, 0x7e, 0x6c, 0x44, 0x00 }, // l
	{ 0x70, 0xf8, 0xfc, 0xfa, 0x72, 0x02, 0x04, 0x00 }, // m
	{ 0x18, 0x0c, 0x0e, 0xf8, 0x7c, 0x0e, 0x1b, 0x09 }, // n
	{ 0x54, 0x74, 0x56, 0x7d, 0x56, 0x74, 0x54, 0x00 }, // o
	{ 0x00, 0x38, 0x7c, 0x42, 0x3e, 0x1c, 0x00, 0x00 }, // p
	{ 0x00, 0x04, 0x7c, 0x3e, 0x00, 0x00, 0x00, 0x00 }, // q
	{ 0x44, 0x62, 0x72, 0x5e, 0x4c, 0x00, 0x00, 0x00 }, // r
	{ 0x24, 0x42, 0x4a, 0x7e, 0x34, 0x00, 0x00, 0x00 }, // s
	{ 0x30, 0x28, 0x7c, 0x7e, 0x20, 0x00, 0x00, 0x00 }, // t
	{ 0x4e, 0x4e, 0x4a, 0x7a, 0x32, 0x00, 0x00, 0x00 }, // u
	{ 0x30, 0x7c, 0x4e, 0x4a, 0x30, 0x00, 0x00, 0x00 }, // v
	{ 0x06, 0x66, 0x16, 0x0e, 0x06, 0x00, 0x00, 0x00 }, // w
	{ 0x20, 0x74, 0x4a, 0x5a, 0x36, 0x00, 0x00, 0x00 }, // x
	{ 0x08, 0x5c, 0x32, 0x1e, 0x0c, 0x00, 0x00, 0x00 }, // y
	{ 0xc3, 0x81, 0x00, 0x00, 0x00, 0x00, 0x81, 0xc3 }, // z
	{ 0x00, 0x66, 0x42, 0x00, 0x00, 0x42, 0x66, 0x00 }, // {
	{ 0x38, 0x2c, 0x24, 0x26, 0x22, 0x33, 0x91, 0xd1 }, // |
	{ 0xd1, 0x93, 0x32, 0xe2, 0x43, 0x41, 0xe3, 0x3e }, // }
	{ 0x1c, 0x34, 0x24, 0x64, 0x44, 0xcc, 0x89, 0x8b }, // ~
	{ 0x8b, 0xc9, 0x4c, 0x47, 0xc2, 0x82, 0xc7, 0x7c }, // [127]
	{ 0xfe, 0x3f, 0x78, 0x3e, 0x3e, 0x78, 0x3f, 0xfe }, // [128]
	{ 0x88, 0xdc, 0x76, 0xff, 0xff, 0x76, 0xdc, 0x88 }, // [129]
	{ 0xb6, 0x8a, 0xa8, 0x2a, 0xb6, 0x8a, 0xa8, 0x2a }, // [130]
	{ 0xfc, 0x92, 0x92, 0xba, 0x92, 0x92, 0xfc, 0x00 }, // [131]
	{ 0xff, 0xa5, 0xff, 0xbd, 0xbd, 0xff, 0xa5, 0xff }, // [132]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [133]
	{ 0xe0, 0x10, 0xe8, 0x74, 0x7a, 0xfd, 0x7d, 0x25 }, // [134]
	{ 0x25, 0x7d, 0xfd, 0x7a, 0x74, 0xe8, 0x10, 0xe0 }, // [135]
	{ 0x00, 0x00, 0x60, 0x70, 0x68, 0x7c, 0xbc, 0x40 }, // [136]
	{ 0x40, 0xbc, 0x7c, 0x68, 0x70, 0x60, 0x00, 0x00 }, // [137]
	{ 0x1c, 0x86, 0x42, 0x7a, 0x0f, 0xfb, 0x0f, 0xff }, // [138]
	{ 0x0f, 0xfb, 0x0f, 0x7a, 0x42, 0x86, 0x1c, 0x00 }, // [139]
	{ 0x00, 0x00, 0x00, 0xf0, 0xb8, 0xbc, 0xfc, 0xfc }, // [140]
	{ 0xfc, 0xfc, 0xfc, 0xbc, 0xb8, 0xf0, 0x00, 0x00 }, // [141]
	{ 0x00, 0x00, 0xe0, 0x58, 0xac, 0x56, 0xea, 0x75 }, // [142]
	{ 0xeb, 0x15, 0x1f, 0xff, 0xfb, 0x9f, 0x1e, 0x3c }, // [143]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [144]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [145]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [146]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [147]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [148]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [149]
	{ 0x07, 0x08, 0x17, 0x2e, 0x5e, 0xbf, 0xbe, 0xa4 }, // [150]
	{ 0xa4, 0xbe, 0xbf, 0x5e, 0x2e, 0x17, 0x08, 0x07 }, // [151]
	{ 0x00, 0x00, 0x06, 0x0e, 0x16, 0x3e, 0x3d, 0x02 }, // [152]
	{ 0x02, 0x3d, 0x3e, 0x16, 0x0e, 0x06, 0x00, 0x00 }, // [153]
	{ 0x03, 0x01, 0x00, 0x3c, 0x07, 0x01, 0x3e, 0x07 }, // [154]
	{ 0x3e, 0x01, 0x07, 0x3c, 0x00, 0x01, 0x03, 0x00 }, // [155]
	{ 0x00, 0x00, 0x00, 0x07, 0x0f, 0x1f, 0x1d, 0x1b }, // [156]
	{ 0x1b, 0x1b, 0x1d, 0x1f, 0x0f, 0x07, 0x00, 0x00 }, // [157]
	{ 0x00, 0x00, 0x23, 0x2d, 0x3a, 0x2f, 0x3b, 0x08 }, // [158]
	{ 0x09, 0x0e, 0x1f, 0x35, 0x28, 0x31, 0x21, 0x00 }, // [159]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [160]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [161]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [162]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [163]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [164]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [165]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [166]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [167]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [168]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [169]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [170]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [171]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [172]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [173]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [174]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [175]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [176]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [177]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [178]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [179]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [180]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [181]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [182]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [183]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [184]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [185]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [186]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [187]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [188]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [189]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [190]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [191]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [192]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [193]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [194]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [195]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [196]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [197]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [198]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [199]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [200]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [201]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [202]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [203]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [204]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [205]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [206]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [207]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [208]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [209]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [210]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [211]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [212]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [213]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [214]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [215]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [216]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [217]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [218]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [219]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [220]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [221]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [222]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [223]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [224]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [225]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [226]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [227]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [228]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [229]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [230]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [231]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [232]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [233]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [234]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [235]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [236]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [237]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [238]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [239]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [240]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [241]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [242]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [243]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [244]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [245]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [246]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [247]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [248]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [249]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [250]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [251]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [252]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [253]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [254]
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // [255]
};


/*****ï™êgÇÃêÈåæ*****/
uint64_t Glcd_map[128];
uint8_t pageadd;
uint8_t columnadd;
/*****IC1 Ç∆ IC2 ÇÃëIë*****/
void Glcd_SelectChip(uint8_t IC1,uint8_t IC2){
	if(IC1 == TRUE){
		FUNC_PORT |= 1 << GLCD_CS1;
		}else{
		FUNC_PORT &= ~(1 << GLCD_CS1);
	}
	if(IC2 == TRUE){
		FUNC_PORT |= 1 << GLCD_CS2;
		}else{
		FUNC_PORT &= ~(1 << GLCD_CS2);
	}
	wait();
}
/*****Display ON*****/
void Glcd_Disp(uint8_t state){
	FUNC_PORT &= ~((1<<PIN_DI) | (1<<PIN_RW));
	wait();
	if(state==TRUE){
		DATA_PORT = 0b00111111;
		}else{
		DATA_PORT = 0b00111110;
	}
	wait();
	FUNC_PORT |= 1<<PIN_E;
	wait();
	FUNC_PORT &= ~(1<<PIN_E);
	wait();
}
/*****Set Start Address*****/
void Glcd_StartLine(uint8_t line){
	FUNC_PORT &= ~((1<<PIN_DI) | (1<<PIN_RW));
	wait();
	DATA_PORT = (line & 0b00111111) | 0b11000000;
	wait();
	FUNC_PORT |= 1<<PIN_E;
	wait();
	FUNC_PORT &= ~(1<<PIN_E);
	wait();
}
/*****Set Page Address*****/
void Glcd_SetPage(uint8_t page){
	FUNC_PORT &= ~((1<<PIN_DI) | (1<<PIN_RW));
	wait();
	DATA_PORT = (page & 0b00000111) | 0b10111000;
	wait();
	FUNC_PORT |= 1<<PIN_E;
	wait();
	FUNC_PORT &= ~(1<<PIN_E);
	wait();
}
/*****Set Column Address*****/
void Glcd_SetColumn(uint8_t column){
	FUNC_PORT &= ~((1<<PIN_DI) | (1<<PIN_RW));
	wait();
	DATA_PORT = (column & 0b00111111) | 0b01000000;
	wait();
	FUNC_PORT |= 1<<PIN_E;
	wait();
	FUNC_PORT &= ~(1<<PIN_E);
	wait();
}
/*****Write Data*****/
void Glcd_Write(uint8_t data){
	FUNC_PORT = (FUNC_PORT | 1<<PIN_DI) & ~(1<<PIN_RW);
	wait();
	DATA_PORT = data;
	wait();
	FUNC_PORT |= 1<<PIN_E;
	wait();
	FUNC_PORT &= ~(1<<PIN_E);
	wait();
}


/*****ílÇì¸ÇÍë÷Ç¶ÇÈÉ}ÉNÉç*****/
//#define swap(x,y) do{uint8_t temp=x;x=y;y=temp;}while(0)
/*****ç¿ïW (X,Y) Ç…ì_Çë≈Ç¬*****/
void DrawDot(uint8_t x,uint8_t y){
	if(x>=128) x=127;
	if(y>=64) y=63;
	x &= 0b01111111;
	y &= 0b00111111;
	Glcd_map[x] |= (uint64_t) 1 << y;
}

/*****ç¿ïW (X,Y) ÇÃì_Çè¡Ç∑*****/
void EraseDot(uint8_t x,uint8_t y){
	if(x>=128) x=127;
	if(y>=64) y=63;
	x &= 0b01111111;
	y &= 0b00111111;
	Glcd_map[x] &= ~((uint64_t) 1 << y);
}

/*****(x1,y) Ç©ÇÁ (x2,y) Ç‹Ç≈â°ê¸Çà¯Ç≠*****/
void DrawLine_line(uint8_t y,uint8_t x1,uint8_t x2){
	uint8_t i;
	if(x1>=128) x1=127;
	if(x2>=128) x2=127;
	if(y>=64) y=63;
	y &= 0b00111111;
	x1 &= 0b01111111;
	x2 &= 0b01111111;
	if(x1 > x2)swap(x1,x2);
	for(i = x1;i <= x2;i++){
		Glcd_map[i] |= (uint64_t)1 << y;
	}
}
/*****(x1,y) Ç©ÇÁ (x2,y) Ç‹Ç≈â°ê¸Ç≈è¡Ç∑*****/
void Glcd_Erase_Line_line(uint8_t y,uint8_t x1,uint8_t x2){
	uint8_t i;
	if(x1>=128) x1=127;
	if(x2>=128) x2=127;
	if(y>=64) y=63;
	y &= 0b11000000;
	x1 &= 0b10000000;
	x2 &= 0b10000000;
	if(x1 > x2)swap(x1,x2);
	for(i = x1;i <= x2;i++){
		Glcd_map[i] |= (uint64_t)1 << y;
	}
}

/*****(x,y1) Ç©ÇÁ (x,y2) Ç‹Ç≈ècê¸Çà¯Ç≠*****/
void DrawLine_column(uint8_t x,uint8_t y1,uint8_t y2){
	if(x>=128) x=127;
	if(y1>=64) y1=63;
	if(y2>=64) y2=63;
	x &= 0b01111111;
	y1 &= 0b00111111;
	y2 &= 0b00111111;
	if(y1 > y2)swap(y1,y2);
	Glcd_map[x] |= (((uint64_t)0xFFFFFFFFFFFFFFFF << y1) & ~((uint64_t)0xFFFFFFFFFFFFFFFF << (y2 + 1)));
}
/*****(x1,y) Ç©ÇÁ (x2,y) Ç‹Ç≈ècê¸Ç≈è¡Ç∑*****/
void Glcd_Erase_Line_column(uint8_t x,uint8_t y1,uint8_t y2){
	if(x>=128) x=127;
	if(y1>=64) y1=63;
	if(y2>=64) y2=63;
	x &= 0b10000000;
	y1 &= 0b11000000;
	y2 &= 0b11000000;
	if(y1 > y2)swap(y1,y2);
	Glcd_map[x] |= (((uint64_t)0xFFFFFFFFFFFFFFFF << y1) & ~((uint64_t)0xFFFFFFFFFFFFFFFF << (y2 + 1)));
}

/*****éläpå`Çï`âÊÇ∑ÇÈ*****/
void DrawRectangle(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2){
	DrawLine_column(x1,y1,y2);
	DrawLine_column(x2,y1,y2);
	DrawLine_line(y1,x1,x2);
	DrawLine_line(y2,x1,x2);
}
/*****éläpå`Ç≈è¡Ç∑*****/
void EraseRectangle(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2){
	DrawLine(x1,y1,x1,y2,0);
	DrawLine(x1,y2,x2,y2,0);
	DrawLine(x1,y1,x2,y1,0);
	DrawLine(x1,y2,x2,y2,0);
}

/*****Glcd_map[128] Çâtèªñ{ëÃÇ…ì]ëó*****/
void Glcd_Print_map(){
	uint8_t i,j;
	Glcd_SelectChip(TRUE,FALSE);
	for(i=0;i<8;i++){
		Glcd_SetPage(i);
		Glcd_SetColumn(0);
		for(j=0;j<64;j++){
			Glcd_Write(Glcd_map[j] >> (i * 8));
		}
	}
	Glcd_SelectChip(FALSE,TRUE);
	for(i=0;i<8;i++){
		Glcd_SetPage(i);
		Glcd_SetColumn(0);
		for(j=64;j<128;j++){
			Glcd_Write(Glcd_map[j] >> (i * 8));
		}
	}
}
/*****Glcd_map[128] ÇÃëSÇƒÇÃÉfÅ[É^Çè¡Ç∑*****/
void Clear_Screen(){
	uint8_t i;
	for(i=0;i<128;i++){
		Glcd_map[i]=0;
	}
}
/*****è¨Ç≥Ç¢ï∂éöÅ@ñ¢äÆê¨*****//*
void Glcd_minifont(uint8_t start_x,uint8_t start_y,uint8_t font_num){
	if(font_num<0x20) font_num=0x20;
	font_num-=0x20;
	for(uint8_t i=0;i<5;i++){
		if((((uint64_t)pgm_read_byte(&mini_font[font_num/21*5+i]))>>((20-font_num%21)*3+2)) & 0x0000000000000001)DrawDot(start_x,start_y+i);
		if((((uint64_t)pgm_read_byte(&mini_font[font_num/21*5+i]))>>((20-font_num%21)*3+1)) & 0x0000000000000001)DrawDot(start_x+1,start_y+i);
		if((((uint64_t)pgm_read_byte(&mini_font[font_num/21*5+i]))>>((20-font_num%21)*3)) & 0x0000000000000001)DrawDot(start_x+2,start_y+i);
	}
}*/
/***** (X,Y,'ï∂éö') ÇPï∂éöï\é¶*****/
void Glcd_font(uint8_t start_x,uint8_t start_y,char font_num){
	uint8_t i=0;
	if(font_num-' '>=96){
		for(i=0;i<5;i++){
			Glcd_map[start_x+i] &= ((uint64_t)(0x00ffffffffffffff >> (56-start_y)) | ((uint64_t)0xffffffffffffff00 << start_y));
			Glcd_map[start_x+i] |= (((uint64_t)(pgm_read_byte(&chara_font[font_num-' '-' '][i])) & (uint64_t)0x000000000000007f) << start_y);
		}
	}
	else{
		for(i=0;i<5;i++){
			Glcd_map[start_x+i] &= ((uint64_t)(0x00ffffffffffffff >> (56-start_y)) | ((uint64_t)0xffffffffffffff00 << start_y));
			Glcd_map[start_x+i] |= (((uint64_t)(pgm_read_byte(&chara_font[font_num-' '][i])) & (uint64_t)0x000000000000007f) << start_y);
		}
	}
	return;
}
/***** (X,Y,"ï∂éöóÒ") ï∂éöóÒï\é¶*****/
void Glcd_str(uint8_t start_x,uint8_t start_y,char *str){
	uint8_t x=0;
	x=start_x;
	uint8_t y=0;
	y=start_y;
	uint8_t i=0;
	while(*str!='\0'){
		if(x+5>=128){
			x = start_x;
			y += 8;
		}
		if(y+7>64) break;
		if(*str-' '>=96){
			for(i=0;i<5;i++){
				Glcd_map[x] &= ((uint64_t)(0x00ffffffffffffff >> (56-y)) | ((uint64_t)0xffffffffffffff00 << y));
				Glcd_map[x] |= (((uint64_t)(pgm_read_byte(&chara_font[*str-' '-' '][i]))) << y);
				x++;
			}
			Glcd_map[x] &= ((uint64_t)(0x00ffffffffffffff >> (56-y)) | ((uint64_t)0xffffffffffffff00 << y));
		}
		else{
			for(i=0;i<5;i++){
				Glcd_map[x] &= ((uint64_t)(0x00ffffffffffffff >> (56-y)) | ((uint64_t)0xffffffffffffff00 << y));
				Glcd_map[x] |= (((uint64_t)(pgm_read_byte(&chara_font[*str-' '][i]))) << y);
				x++;
			}
			Glcd_map[x] &= ((uint64_t)(0x00ffffffffffffff >> (56-y)) | ((uint64_t)0xffffffffffffff00 << y));
		}
		x++;
		Glcd_map[x] &= ((uint64_t)(0x00ffffffffffffff >> (56-y)) | ((uint64_t)0xffffffffffffff00 << y));
		str++;
		if(*str=='\n'){
			y += 8;
			str++;
		}
		if(*str=='\r'){
			x = start_x;
			str++;
		}
	}
	return;
}
/***** (X,Y,"ï∂éöóÒ",éüÇÃï∂éöï\é¶Ç‹Ç≈ÇÃéûä‘) ÇPï∂éöÇ∏Ç¬ï∂éöóÒï\é¶*****/
void Glcd_str_wait(uint8_t start_x,uint8_t start_y,char *str,uint8_t lag){
	uint8_t x=0;
	x=start_x;
	uint8_t y=0;
	y=start_y;
	uint8_t i=0;
	while(*str!='\0'){
		if(x+5>=128){
			x = start_x;
			y += 8;
		}
		if(y+7>64) break;
		if(*str-' '>=96){
			for(i=0;i<5;i++){
				Glcd_map[x] &= ((uint64_t)(0x00ffffffffffffff >> (56-y)) | ((uint64_t)0xffffffffffffff00 << y));
				Glcd_map[x] |= (((uint64_t)(pgm_read_byte(&chara_font[*str-' '-' '][i]))) << y);
				x++;
			}
			Glcd_map[x] &= ((uint64_t)(0x00ffffffffffffff >> (56-y)) | ((uint64_t)0xffffffffffffff00 << y));
		}
		else{
			for(i=0;i<5;i++){
				Glcd_map[x] &= ((uint64_t)(0x00ffffffffffffff >> (56-y)) | ((uint64_t)0xffffffffffffff00 << y));
				Glcd_map[x] |= (((uint64_t)(pgm_read_byte(&chara_font[*str-' '][i]))) << y);
				x++;
			}
			Glcd_map[x] &= ((uint64_t)(0x00ffffffffffffff >> (56-y)) | ((uint64_t)0xffffffffffffff00 << y));
		}
		x++;
		Glcd_map[x] &= ((uint64_t)(0x00ffffffffffffff >> (56-y)) | ((uint64_t)0xffffffffffffff00 << y));
		str++;
		if(*str=='\n'){
			y += 8;
			str++;
		}
		else if(*str=='\r'){
			x = start_x;
			str++;
		}
		else{
			for(i=0;i<lag;i++){
				_delay_ms(1);
			}
			Glcd_Print_map();
		}
	}
	Glcd_Print_map();
	return;
}
/***** (X,Y,âÊëúî‘çÜ,èdÇÀê›íË,ç∂âEîΩì]) graphicsÇ…ì¸Ç¡ÇΩ8x8ÇÃâÊëúï\é¶*****/
void Glcd_graphic(uint8_t start_x,uint8_t start_y,char graph_num,uint8_t modes,uint8_t re){
	uint8_t i;
	if(re==0){
		for(i=0;i<8;i++){
			if(i+start_x>=128) break;
			if(modes==PUT)Glcd_map[start_x+i] &= ((uint64_t)(0x00ffffffffffffff >> (56-start_y)) | ((uint64_t)0xffffffffffffff00 << start_y));
			if(modes==OR || modes==PUT) Glcd_map[start_x+i] |= (((uint64_t)(pgm_read_byte(&graphics[graph_num][i]))) << start_y);
			if(modes==AND)  Glcd_map[start_x+i] &= (((uint64_t)(pgm_read_byte(&graphics[graph_num][i]))) << start_y);
		}
	}
	else{
		for(i=0;i<8;i++){
			if(modes=PUT)Glcd_map[start_x+7-i] &= ((uint64_t)(0x00ffffffffffffff >> (56-start_y)) | ((uint64_t)0xffffffffffffff00 << start_y));
			if(modes==OR || modes==PUT) Glcd_map[start_x+7-i] |= (((uint64_t)(pgm_read_byte(&graphics[graph_num][i]))) << start_y);
			if(modes==AND) Glcd_map[start_x+7-i] &= (((uint64_t)(pgm_read_byte(&graphics[graph_num][i]))) << start_y);
			if(start_x+7-i<=0) break;
		}
	}
}
/***** (X,Y,âÊëúî‘çÜ,ï™äÑî‘çÜ,èdÇÀê›íË,ç∂âEîΩì]) graphicsÇ…ì¸Ç¡ÇΩ4x4ÇÃâÊëúï\é¶*****/
void Glcd_graphic_mini(uint8_t start_x,uint8_t start_y,char graph_num,char mini_num,uint8_t modes,uint8_t re){
	uint8_t i;
	uint64_t putdel;
	uint8_t del =  0;
	uint8_t dely = 0;
	if(mini_num >= 4){
		graph_num += mini_num / 4;
		mini_num %= 4;
	}
	del  = (mini_num%2)*4;
	dely = (mini_num/2)*4;
	putdel =~ ((0x00000000000000ff>>dely)<<start_y);
	if(re==0){
		for(i=del;i<8;i++){
			if(i+start_x>=128) break;
			if(i-del >= 4) break;
			if(modes==PUT)Glcd_map[start_x+i-del] &= putdel;
			if(modes==OR || modes==PUT) Glcd_map[start_x+i-del] |= (((uint64_t)(pgm_read_byte(&graphics[graph_num][i])>>dely)) << start_y);
			if(modes==AND)  Glcd_map[start_x+i-del] &= (((uint64_t)(pgm_read_byte(&graphics[graph_num][i])>>dely)) << start_y);
		}
	}
	else{
		for(i=del;i<8;i++){
			if(i-del >= 4) break;
			if(modes=PUT)Glcd_map[start_x+i-del] &= putdel;
			if(modes==OR || modes==PUT) Glcd_map[start_x+i-del] |= (((uint64_t)(pgm_read_byte(&graphics[graph_num][i])>>dely)) << start_y);
			if(modes==AND) Glcd_map[start_x+i-del] &= (((uint64_t)(pgm_read_byte(&graphics[graph_num][i])>>dely)) << start_y);
		}
	}
}
/***** (X,Y,âÊëúî‘çÜ,èdÇÀê›íË,ç∂âEîΩì],ècçÌÇË,â°çÌÇË) graphicsÇ…ì¸Ç¡ÇΩ8x8ÇÃâÊëúï\é¶(É}ÉbÉvï\é¶óp)*****/
void Glcd_graphmap(uint8_t start_x,uint8_t start_y,char graph_num,uint8_t modes,uint8_t re,uint8_t del,uint8_t dely){
	uint8_t i;
	uint64_t putdel;
	//dely=0;
	putdel =~ ((0x00000000000000ff>>dely)<<start_y);
	if(re==0){
		for(i=del;i<8;i++){
			if(i+start_x>=128) break;
			if(modes==PUT)Glcd_map[start_x+i-del] &= putdel;
			if(modes==OR || modes==PUT) Glcd_map[start_x+i-del] |= (((uint64_t)(pgm_read_byte(&graphics[graph_num][i])>>dely)) << start_y);
			if(modes==AND)  Glcd_map[start_x+i-del] &= (((uint64_t)(pgm_read_byte(&graphics[graph_num][i])>>dely)) << start_y);
		}
	}
	else{
		for(i=del;i<8;i++){
			if(modes=PUT)Glcd_map[start_x+i-del] &= putdel;
			if(modes==OR || modes==PUT) Glcd_map[start_x+i-del] |= (((uint64_t)(pgm_read_byte(&graphics[graph_num][i])>>dely)) << start_y);
			if(modes==AND) Glcd_map[start_x+i-del] &= (((uint64_t)(pgm_read_byte(&graphics[graph_num][i])>>dely)) << start_y);
		}
	}
}
/****** íºê¸Çï`âÊ ******/
void DrawLine( uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1 , uint8_t color) {
	uint8_t x, y, tmp;
	double slope = 0;
	
	if (abs(x1 - x0) > abs(y1 - y0)) {
		if (x1 < x0) {                         // ç¿ïWílÇÃì¸ÇÍë÷Ç¶
			tmp = x0;
			x0 = x1;
			x1 = tmp;
			tmp = y0;
			y0 = y1;
			y1 = tmp;
		}
		slope = (double)(y1 - y0) / (x1 - x0); // åXéŒó¶ÇÃéZèo
		for (int i=0; i<=(x1-x0); i++) {
			x = x0 + i;
			y = y0 + slope * i;
			if(color) DrawDot(x, y);
			else EraseDot(x,y);
		}
		} else {
		if (y1 < y0) {                         // ç¿ïWílÇÃì¸ÇÍë÷Ç¶
			tmp = x0;
			x0 = x1;
			x1 = tmp;
			tmp = y0;
			y0 = y1;
			y1 = tmp;
		}
		slope = (double)(x1 - x0) / (y1 - y0); // åXéŒó¶ÇÃéZèo
		for (int i=0; i<=(y1-y0); i++) {
			x = x0 + slope * i;
			y = y0 + i;
			if(color) DrawDot(x, y);
			else EraseDot(x,y);
		}
	}
}

/****** â~Çï`âÊ ******/
void DrawCircle(uint8_t x0, uint8_t y0, uint8_t r)
{
	int16_t x;
	int16_t y;
	int16_t err;
	int16_t old_err;

	x=0;
	y=-r;
	err=2-2*r;
	do{
		DrawDot(x0-x,y0+y);
		DrawDot(x0-y,y0-x);
		DrawDot(x0+x,y0-y);
		DrawDot(x0+y,y0+x);
		if ((old_err=err)<=x)   err+=++x*2+1;
		if (old_err>y || err>x) err+=++y*2+1;
	} while(y<0);
	
	return ;
}
/****** ìhÇËÇ¬Ç‘Çµâ~Çï`âÊ ******/
void DrawFillCircle(uint8_t x0, uint8_t y0, uint8_t r)
{
	int16_t x;
	int16_t y;
	int16_t err;
	int16_t old_err;
	bool ChangeX;
		
	x=0;
	y=-r;
	err=2-2*r;
	ChangeX=true;
	do{
		if(ChangeX) {
			
			DrawLine(x0-x,y0-y,x0-x,y0+y,1);
			DrawLine(x0+x,y0-y,x0+x,y0+y,1);
		} // if
		ChangeX=(old_err=err)<=x;
		if (ChangeX)            err+=++x*2+1;
		if (old_err>y || err>x) err+=++y*2+1;
	} while(y<=0);
	
	return;
}